reference {
  akka {
    management {
      http {
        hostname = 127.0.0.1
        hostname = ${?MANAGEMENT_HTTP_HOST}
        port = 8558
        port = ${?MANAGEMENT_HTTP_PORT}
        bind-hostname = 0.0.0.0
        bind-hostname = ${?MANAGEMENT_HTTP_BIND_HOST}
        bind-port = 8558
        bind-port = ${?MANAGEMENT_HTTP_BIND_PORT}
      }
    }
    remote {
      artery {
        transport = tcp
        canonical{
          hostname = 127.0.0.1
          hostname = ${?REMOTING_HOST}
          port = 2552
          port = ${?REMOTING_PORT}
        }
        bind {
          hostname = 127.0.0.1
          hostname = ${?REMOTING_BIND_HOST}
          port = 2552
          port = ${?REMOTING_BIND_PORT}
        }
        advanced {
          maximum-frame-size = 16 MiB
        }
      }
      log-remote-lifecycle-events = off
    }

    coordinated-shutdown {
      phases {
        service-requests-done {
          timeout=135s
        }
        before-actor-system-terminate {
            timeout=30s
        }
      }
    }
    coordinated-shutdown.exit-jvm = on

    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    http {
      host-connection-pool {
        max-open-requests = 2048
        max-retries = 0
        max-connection-backoff = 1000 ms
        max-connections = 100
      }
      server.parsing.max-content-length = 120m
      server.parsing.max-chunk-size= 120m
      client.parsing.max-chunk-size= 120m
    }
  }
  cinnamon {
    akka {
      actors {
        "/user/*" {
          report-by = class
        }
      }
    }
    prometheus {
      exporters += http-server
      http-server {
        host = 127.0.0.1
        host = ${?PROMETHEUS_HOST}
        port = 9091
        port = ${?PROMETHEUS_PORT}
      }
    }
    slf4j.mdc {
      serialization.limit = 2048 bytes
    }
  }
  cinnamon.akka.http.servers {
    "*:*" {
      paths {
        "*" {
          metrics = on
        }
      }
    }
  }
  cinnamon.akka.http.clients {
    "*:*" {
      paths {
        "*" {
          metrics = on
        }
      }
    }
  }
  eventhub-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
     fixed-pool-size = 16
    }
    throughput = 1
  }
  blobstorage-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 16
    }
    throughput = 1
  }
  queueAdd-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 16
      }
      throughput = 1
    }
  http-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 32
    }
    throughput = 1
  }
  config{
    http {
      server-request-timeout = 125
      connect-timeout = 1
    }
    ftp{
      connect-timeout = 1000
    }
    db {
        postgres {
          profile = "slick.jdbc.PostgresProfile$"
          db {
            dataSourceClassName = "org.postgresql.ds.PGSimpleDataSource"
            connectionPool = disabled
            #connectionPool = "HikariCP"
            registerMbeans = true
            numThreads= 40
            queueSize= 4000
            socketTimeout = 3000
            connectionTimeout = 3000
          }
        }
    }
  }
  httpactor {
    ssl-config {
#       debug {
#         all = true
#       }
      loose {
        acceptAnyCertificate = true
        allowWeakCiphers = true
        disableHostnameVerification = true
        allowWeakProtocols = true
      }
      disabledSignatureAlgorithms = ["MD2", "MD4", "MD5"]
      disabledKeyAlgorithms = ["DHE keySize < 2048", "ECDH keySize < 2048", "ECDHE keySize < 2048", "RSA keySize < 2048", "DSA keySize < 2048", "EC keySize < 224", "RSA keySize < 1024", "DSA keySize < 1024"]
      trustManager = {
        stores = [{
          path: ${app.bundle.cacerts.path}
        }]
      }
    }
  }
}
db {
  database {
    fdr = ${config.db.postgres}
    fdr.db.properties.user = ${DB_FDR_USER}
    fdr.db.properties.password = ${DB_FDR_PASSWORD}
    fdr.db.numThreads = 20
    fdr.db.queueSize= 2000
    fdr.db.properties.url = ${DB_FDR_URL}
  }
}
jobs{
    all{
        bundleTimeoutSeconds=86400 #24 ore

        database {
            fdr.db.numThreads = 20
            fdr.db.queueSize= 2000
        }
    }
}
app {
    apiConfigCache{
        url="https://api.platform.pagopa.it/api-config-cache/p/v1/stakeholders/fdr/cache/schemas/v1"
        subscriptionKey=${API_CONFIG_CACHE_SUBSCRIPTION_KEY}
        timeout=60
    }
    nexi{
        nodoChiediElencoFlussiRendicontazione {
            url="https://api.platform.pagopa.it/fdr-legacy/nodo-per-pa/v1"
        }
        nodoChiediFlussoRendicontazione {
            url="https://api.platform.pagopa.it/fdr-legacy/nodo-per-pa/v1"
        }
        nodoInviaFlussoRendicontazione {
            url="https://api.platform.pagopa.it/fdr-legacy/nodo-per-psp/v1"
        }
        subscriptionKey=${FDR_LEGACY_SUBSCRIPTION_KEY}
        timeoutSeconds=60
    }
    fdr{
        internalGetWithRevision {
            url="https://api.platform.pagopa.it/fdr-internal/service/v1/internal/organizations/{organizationId}/fdrs/{fdr}/revisions/{revision}/psps/{pspId}"
            method="GET"
        }
        internalGetFdrPayment {
            url="https://api.platform.pagopa.it/fdr-internal/service/v1/internal/organizations/{organizationId}/fdrs/{fdr}/revisions/{revision}/psps/{pspId}/payments"
            method="GET"
        }
        subscriptionKey=${FDR_SUBSCRIPTION_KEY}
        timeoutSeconds=60
    }
    azure-mongo {
        connection-string = ${MONGO_CONNECTION_STRING}
        db-name = ${MONGO_DATABASE_NAME}
        metadata-document-name = ${MONGO_METADATA_DOCUMENT_NAME}
        events-document-name = ${MONGO_EVENTS_DOCUMENT_NAME}
    }
    reXmlLog=false
    reJsonLog=true
    callNexiToo=false
    pdd-host-header-name=X-Original-Forwarded-For
    chiediElencoFlussiRendicontazioneDayLimit=30
    configScheduleMinutes=1
    limitjobsSize=100
    limitDays=30
    coordinatedShutdown=true
    waitAsyncProcesses=true
    coordinatedShutdownHttpTimeout=130
    coordinatedShutdownTerminationTimeout=20
    routing.useMetrics=true
    bundle.startup.timeout=120
    bundle.checkUTF8=false
    bundleTimeoutSeconds=600#10 minuti
    additionalFdrValidations=${ADDITIONAL_FDR_VALIDATIONS}
    azure-storage-blob {
        enabled = true
        container-name = ${AZURE_STORAGE_FDR1_FLOWS_BLOB_NAME}
        fdr1-flows-container-name = ${AZURE_STORAGE_FDR1_FLOWS_BLOB_NAME}
        connection-string =  ${AZURE_STORAGE_BLOB_CONNECTION_STRING}
        re-connection-string =  ${AZURE_STORAGE_RE_CONNECTION_STRING}
        re-payload-container-name = ${AZURE_STORAGE_RE_PAYLOAD_BLOB_NAME}
    }
    micrometer {
        http-server {
            host = 127.0.0.1
            host = ${?MICROMETER_HOST}
            port = 9092
            port = ${?MICROMETER_PORT}
            hostname = "fdr-micrometer"
            hostname = ${?MICROMETER_HOSTNAME}
        }
    }
}